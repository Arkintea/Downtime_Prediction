version: '3.8'

services:
  training:
    build: .
    container_name: downtime_training
    volumes:
      - ./data:/app/data
      - ./artifacts:/app/artifacts
      - ./encoders:/app/encoders
      - ./mlruns:/app/mlruns
      - ./.env:/app/.env
    environment:
      - PYTHONPATH=/app
    command: python training_pipeline/train_pipeline.py
    profiles:
      - training

  inference-api:
    build: .
    container_name: downtime_inference_api
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./artifacts:/app/artifacts
      - ./encoders:/app/encoders
      - ./logs:/app/logs
      - ./.env:/app/.env
    environment:
      - PYTHONPATH=/app
    command: uvicorn inference.main:app --host 0.0.0.0 --port 8000
    depends_on:
      - training
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - inference
    networks:
      - monitoring
      - default

  dashboard:
    build: .
    container_name: downtime_dashboard
    ports:
      - "8501:8501"
    volumes:
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app
    command: streamlit run dashboard/streamlit_dashboard.py --server.port 8501 --server.address 0.0.0.0
    depends_on:
      - inference-api
    profiles:
      - inference

  mqtt-publisher:
    build: .
    container_name: downtime_mqtt_publisher
    volumes:
      - ./data:/app/data
      - ./config:/app/config
      - ./.env:/app/.env
    environment:
      - PYTHONPATH=/app
    command: python streaming/publish_to_mqtt.py
    depends_on:
      - training
    profiles:
      - streaming

  kafka-consumer:
    build: .
    container_name: downtime_kafka_consumer
    volumes:
      - ./.env:/app/.env
    environment:
      - PYTHONPATH=/app
      - FASTAPI_ENDPOINT=http://inference-api:8000/predict
    command: python streaming/consume_kafka_and_infer.py
    depends_on:
      - inference-api
    profiles:
      - streaming

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    extra_hosts:
      - "host.docker.internal:host-gateway"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring

volumes:
  grafana_data:

networks:
  monitoring:
    driver: bridge